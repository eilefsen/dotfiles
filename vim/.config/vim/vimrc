" Sensible defaults {{{
set nocompatible
set backspace=indent,eol,start
set history=1000
set tabpagemax=50
set ruler
set nowrap
set incsearch
set ignorecase
set autoread
set smarttab 
set nrformats-=octal
set ttimeout
set ttimeoutlen=100
set mouse=a
set tabstop=4
set shiftwidth=4
set relativenumber

let g:netrw_home = $XDG_STATE_HOME .. '/vim/'
set backupdir=$XDG_STATE_HOME/vim/backup/
set directory=$XDG_STATE_HOME/vim/swap/
set viminfofile=$XDG_STATE_HOME/vim/viminfo
set undodir=$XDG_STATE_HOME/vim/undo/
set undofile

set shell=/bin/bash

if has('path_extra') && (',' . &g:tags . ',') =~# ',\./tags,'
	" Replace the check for a tags file in the parent directory of the current
	" file with a check in every ancestor directory.
	setglobal tags-=./tags tags-=./tags; tags^=./tags;
endif
if !empty(&viminfo)
	" Persist g:UPPERCASE variables, used by some plugins, in .viminfo.
	set viminfo^=!
endif

" Correctly highlight $() and other modern affordances in filetype=sh.
if !exists('g:is_posix') && !exists('g:is_bash') && !exists('g:is_kornshell') && !exists('g:is_dash')
  let g:is_posix = 1
endif
" Enable the :Man command shipped inside Vim's man filetype plugin.
if exists(':Man') != 2 && !exists('g:loaded_man') && &filetype !=? 'man' && !has('nvim')
  runtime ftplugin/man.vim
endif

" Saving options in session and view files causes more problems than it
" solves, so disable it.
set sessionoptions-=options
set viewoptions-=options

set laststatus=2
set wildmenu
set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
set formatoptions+=j

set scrolloff=1
set sidescroll=1
set sidescrolloff=2
set display+=truncate

syntax on
filetype plugin indent on

" Allow color schemes to do bright colors without forcing bold.
if &t_Co == 8 && $TERM !~# '^Eterm'
  set t_Co=16
endif
colorscheme noctu
" }}}

set splitbelow

nnoremap <SPACE> <Nop>
map <SPACE> <Leader>

" disable annoying command history window, use Ctrl+F in Ex mode instead
nnoremap q: <Nop>
" disable redundant replace map
map s <Nop>

" clear search highlight
nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>

" Terminal {{{
let g:term_open = 0
let g:term_bufnr = 0

function CloseTerm(channel)
	let g:term_open = 0
	let g:term_bufnr = 0
endfunction

function OpenTerm()
	if (g:term_open)
		" switch to already open terminal window
		:call win_gotoid(bufwinid(g:term_bufnr))
	else
		:botright 10sp
		let g:term_open = 1
		" open $SHELL in terminal at bottom (full width), with a fixed height of 10 rows
		let g:term_bufnr = term_start($SHELL, #{ term_finish: 'close', curwin: 1, close_cb: function('CloseTerm')})
		:set winfixheight
		:set winfixbuf
	endif
endfunction

nnoremap <leader>sh :call OpenTerm()<CR>
"}}}

" Files {{{
set path+=src/**
nnoremap <leader>ff :find *
nnoremap <leader>fs :sfind *
nnoremap <leader>fv :vert sfind *
" }}}

" Buffers {{{
nnoremap <leader>b :ls<CR>:b<Space>
" }}}

" Quickfix {{{
nnoremap [q :cprev<CR>
nnoremap ]q :cnext<CR>
" }}}

" Functions {{{..
def g:Relpath(filename: string): string
	return substitute(filename, getcwd() .. "/", "./", "")
enddef
"}}}

" Wildmenu {{{
set wildignore=*.swp,*.bak
set wildignore+=*.pyc,*.class,*.sln,*.Master,*.csproj,*.csproj.user,*.cache,*.dll,*.pdb,*.min.*
set wildignore+=*/.git/**/*,*/.hg/**/*,*/.svn/**/*
set wildignore+=tags
set wildignore+=*.tar.*

set wildignorecase
"}}}

let g:ft_man_open_mode = 'vert'

" vim:foldmethod=marker:foldlevel=0
